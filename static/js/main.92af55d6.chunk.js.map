{"version":3,"sources":["redux/constants/action-types.js","redux/reducers/rootReducer.js","components/Average/Average.js","components/Cell/Cell.js","components/Matrix/Matrix.js","redux/actions/index.js","components/Form/Form.js","App.js","index.js"],"names":["ADD_MATRIX","UPDATE_MATRIX_CELL","UPDATE_MATRIX","initialState","rows","columns","x","matrix","rootReducer","state","action","type","payload","id","split","y","newMatrix","amount","value","Average","connect","useState","avg","setAvg","useEffect","matrixAvg","Array","fill","forEach","element","el","jID","averages","map","Math","round","length","calcAvg","className","style","gridTemplateColumns","index","Cell","ratio","isClose","updateMat","handleHover","sumPercent","mouseOutPercent","mouseOutClean","data-percent","onClick","onMouseOver","onMouseOut","dispatch","updateMatrixCell","updateMatrix","sum","setSum","num","closestValues","closestValuesID","closestRight","closestLeft","closestLast","closestRightID","closestLeftID","closestLastID","row","cell","includes","push","i","closest","newMatrixRow","matrixInitial","calcSum","splice","rID","cID","removeRow","random","addRow","ConnectedForm","props","handleChange","bind","handleSubmit","event","this","setState","target","preventDefault","settings","addMatrix","onSubmit","htmlFor","min","onChange","Component","Form","mat","j","App","store","createStore","compose","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.92af55d6.chunk.js","sourcesContent":["export const ADD_MATRIX = 'ADD_MATRIX';\r\nexport const UPDATE_MATRIX_CELL = 'UPDATE_MATRIX_CELL';\r\nexport const UPDATE_MATRIX = 'UPDATE_MATRIX';","import { ADD_MATRIX, UPDATE_MATRIX_CELL, UPDATE_MATRIX } from \"../constants/action-types\";\r\n\r\nconst initialState = {\r\n  rows: 0,\r\n  columns: 0,\r\n  x: 0,\r\n  matrix: []\r\n}\r\n\r\nfunction rootReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case ADD_MATRIX:\r\n      return {\r\n        ...state,\r\n        rows: action.payload.rows,\r\n        columns: action.payload.columns,\r\n        x: action.payload.x,\r\n        matrix: action.payload.matrix,\r\n      }\r\n      case UPDATE_MATRIX_CELL:\r\n        const [x,y] = action.payload.id.split('_');\r\n        const newMatrix = [...state.matrix];\r\n        newMatrix[x][y].amount = action.payload.value;\r\n        return {\r\n          ...state, \r\n          matrix: newMatrix\r\n        }\r\n      case UPDATE_MATRIX:\r\n        return {\r\n          ...state, \r\n          matrix: action.payload.matrix\r\n        }\r\n\r\n   default:\r\n     return state\r\n  }\r\n}\r\n\r\nexport default rootReducer;","import React, { useEffect, useState } from 'react'\r\nimport { connect } from \"react-redux\";\r\n\r\nimport './average.css'\r\n\r\n\r\nconst MatrixAvg = ({matrix, columns}) => {\r\n  const [avg, setAvg] = useState([]);\r\n  useEffect(()=>{calcAvg(matrix, columns)},[matrix, columns])\r\n\r\n  function calcAvg(matrix, columns) {\r\n    let matrixAvg = {\r\n      avg: new Array(columns).fill(0)\r\n    };\r\n    matrix.forEach((element, id) => {\r\n      element.forEach((el, jID) => {\r\n        matrixAvg.avg[jID] += el.amount;\r\n      });\r\n    });\r\n    const averages = matrixAvg.avg.map(el => {\r\n      return Math.round(el /= matrix.length);\r\n    })\r\n    setAvg(averages);\r\n  }\r\n  return (\r\n    <div className='average_wrap' style={{gridTemplateColumns: `repeat(${avg.length}, 1fr)`}}>\r\n      {(avg.length > 0 && matrix.length > 0 ) ? \r\n        avg.map((el, index)=>\r\n          <div key={index} className='matrix__cell'>\r\n            {el}\r\n          </div>\r\n        )\r\n        : <span></span>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = ({ matrix, columns}) => {\r\n  return ({\r\n    matrix,\r\n    columns\r\n  })\r\n};\r\n\r\nconst Average = connect(mapStateToProps)(MatrixAvg);\r\n\r\nexport default Average;\r\n","import React from 'react';\r\n\r\nimport './cell.css';\r\n\r\n\r\nfunction Cell({type, amount, ratio = false, isClose = false, id, updateMat, handleHover, sumPercent, mouseOutPercent, mouseOutClean}) {\r\n  const mouseHandler = () => (type === 'sum') ? sumPercent(id, amount) : handleHover(amount);\r\n  const mouseOutHandler = () => (type === 'sum') ? mouseOutPercent(id, amount) : mouseOutClean()\r\n  const updateMatHandler = () => (type === 'sum') ? '' : updateMat(id, amount);\r\n\r\n  return(\r\n    <button \r\n      data-percent={ratio}\r\n      className={isClose ? 'isClose' : ''}\r\n      value={amount} \r\n      onClick={updateMatHandler} \r\n      onMouseOver={mouseHandler} \r\n      onMouseOut={mouseOutHandler}\r\n    >\r\n      { (ratio !== false) ? `${ratio}%` : amount}\r\n      {(ratio !== false) ? \r\n      <span style={{ 'height' : `${ratio}%` }}></span>\r\n      : <span></span>\r\n      }\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default Cell","import React, { useEffect, useState } from 'react'\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { updateMatrixCell, updateMatrix } from \"../../redux/actions/index\";\r\nimport Cell from '../Cell/Cell';\r\n\r\nimport './matrix.css'\r\n\r\n\r\nconst Matrix = ({matrix, columns, x, updateMatrixCell, updateMatrix}) => {\r\n  const [sum, setSum] = useState([]);\r\n  useEffect(()=>{calcSum(matrix)},[matrix])\r\n\r\n  // ----- Calculate sum -----\r\n  function calcSum(matrix) {\r\n    let matrixInitial = {\r\n      sum: []\r\n    };\r\n    matrix.forEach((element, id) => {\r\n      matrixInitial.sum[id] = [];\r\n      let sum = 0;\r\n      element.forEach((el, jID) => {\r\n        sum += matrix[id][jID].amount;\r\n        matrixInitial.sum[id] = sum;\r\n      });\r\n    });\r\n    setSum(matrixInitial.sum);\r\n  }\r\n  \r\n  // ----- Increment cell -----\r\n  function updateMat(id, value) {\r\n    updateMatrixCell(id, ++value);\r\n  }\r\n\r\n  // ----- Find closest cells -----\r\n  function closest(num) {\r\n    const closestValues = [];\r\n    const closestValuesID = [];\r\n    const newMatrix = [...matrix]\r\n    \r\n    while (x > 0) {\r\n      let closestRight = 1000;\r\n      let closestLeft = -1000;\r\n      let closestLast = 0;\r\n      let closestRightID = '';\r\n      let closestLeftID = '';\r\n      let closestLastID = '';\r\n      newMatrix.forEach(row => {\r\n        row.forEach(cell => {\r\n          if (!closestValues.includes(cell.amount)) {\r\n            if (cell.amount > num && cell.amount < closestRight) {\r\n              closestRight = cell.amount;\r\n              closestRightID = cell.id;\r\n            }\r\n            if (cell.amount < num && cell.amount > closestLeft) {\r\n              closestLeft = cell.amount;\r\n              closestLeftID = cell.id;\r\n            }\r\n            if (x === 1 && closestRight !== 1000 && closestLeft !== -1000) {\r\n              if (closestRight < closestLeft) {\r\n                closestLast = closestRight;\r\n                closestLastID = closestRightID;\r\n              } else {\r\n                closestLast = closestLeft;\r\n                closestLastID = closestLeftID;\r\n              }\r\n            }\r\n          }\r\n        })\r\n      })\r\n      \r\n      if (x === 1 && closestRight !== 1000 && closestLeft !== -1000) {\r\n        closestValues.push(closestLast);\r\n        closestValuesID.push(closestLastID);\r\n        x--;\r\n      } else {\r\n        if (closestLeft === -1000) {\r\n          closestValues.push(closestRight);\r\n          closestValuesID.push(closestRightID);\r\n          x--;\r\n        } else if (closestRight === 1000) {\r\n          closestValues.push(closestLeft);\r\n          closestValuesID.push(closestLeftID);\r\n          x--;\r\n        } else {\r\n          closestValues.push(closestLeft, closestRight);\r\n          closestValuesID.push(closestLeftID, closestRightID);\r\n          x -= 2;\r\n        }\r\n      }\r\n    }\r\n\r\n    // console.log(closestValues);\r\n    // console.log(closestValuesID);\r\n\r\n    for(const i in closestValues){\r\n      const [row, cell] = closestValuesID[i].split('_');\r\n      newMatrix[row][cell].isClose = true;\r\n    }\r\n\r\n    return newMatrix;\r\n  }\r\n\r\n  // ----- Basic cell events -----\r\n  function handleHover(value) {\r\n    const newMatrix = closest(value);\r\n    // console.log(newMatrix);\r\n    updateMatrix(newMatrix);\r\n  }\r\n  \r\n  function mouseOutClean(){\r\n    const newMatrix = [...matrix];\r\n    newMatrix.forEach(row => {\r\n      row.forEach(cell=>cell.isClose = false)\r\n    });\r\n    updateMatrix(newMatrix);\r\n  }\r\n\r\n  // ----- Sum column events -----\r\n  function sumPercent(id, value) {\r\n    const newMatrixRow = matrix[id].map((el)=>{\r\n      el.ratio = Math.round(((el.amount * 100) / value) * 10) / 10;\r\n      return el;\r\n    })\r\n    const newMatrix = [...matrix];\r\n    newMatrix[id] = newMatrixRow;\r\n    updateMatrix(newMatrix);\r\n  }\r\n\r\n  function mouseOutPercent(id) {\r\n    const newMatrixRow = matrix[id].map((el)=>{\r\n      el.ratio = false;\r\n      return el;\r\n    })\r\n    const newMatrix = [...matrix];\r\n    newMatrix[id] = newMatrixRow;\r\n    updateMatrix(newMatrix);\r\n  }\r\n\r\n  // ----- Rows events -----\r\n  function addRow(){\r\n    const rows = matrix.length;\r\n    let newMatrix = [...matrix];\r\n    newMatrix.push([]);\r\n    for (let index = 0; index < columns; index++) {\r\n      newMatrix[rows].push(\r\n        {\r\n          id: `${rows}_${index}`,\r\n          amount: Math.round(Math.random() * (999 - 100) + 100),\r\n        }\r\n      )      \r\n    }\r\n    updateMatrix(newMatrix);\r\n  }\r\n\r\n  function removeRow(id) {\r\n    const newMatrix = [...matrix];\r\n    newMatrix.splice(id,1);\r\n    newMatrix.forEach((row, rID)=>{\r\n      row.forEach((cell, cID)=>{\r\n        cell.id = `${rID}_${cID}`\r\n      })\r\n    })\r\n    updateMatrix(newMatrix);\r\n  }\r\n\r\n  return (\r\n    <div className='matrix__wrap'>\r\n      {(matrix.length > 0) ? \r\n        matrix.map((el, index)=>\r\n          <>\r\n            <div key={index} className='matrix__row' style={{ gridTemplateColumns: `repeat(${el.length + 2}, 1fr)`}}>\r\n              {el.map(cell=> {\r\n                return (\r\n                  <div key={cell.id} className='matrix__cell'>\r\n                    <Cell {...cell} updateMat={updateMat} handleHover={handleHover} mouseOutClean={mouseOutClean}/>\r\n                  </div>\r\n                )  \r\n              })}\r\n              <div className='matrix__row-sum'>\r\n                <div className='matrix__cell'>\r\n                  <Cell type='sum' amount={sum[index]} id={index} sumPercent={sumPercent} mouseOutPercent={mouseOutPercent}/>\r\n                </div>\r\n              </div>\r\n              <button className='remove' onClick={()=>removeRow(index)}>x</button>\r\n            </div>\r\n            {(index === matrix.length - 1) ? <button className='new_row' onClick={()=>addRow()}>Add new row</button> : ''}\r\n          </>            \r\n        )\r\n      : <span>Create your matrix :)</span>}\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nconst mapStateToProps = ({ matrix, columns, x }) => {\r\n  return ({\r\n    matrix,\r\n    columns,\r\n    x\r\n  })\r\n};\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    updateMatrixCell: (id, value) => dispatch(updateMatrixCell(id, value)),\r\n    updateMatrix: (matrix) => dispatch(updateMatrix(matrix))\r\n  };\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Matrix);\r\n","import { ADD_MATRIX, UPDATE_MATRIX_CELL, UPDATE_MATRIX } from '../constants/action-types'\r\n\r\n\r\nexport function addMatrix(payload) {\r\n  let mat = [];\r\n  for(var i=0; i<payload.rows; i++) {\r\n    mat[i] = [];\r\n    for(var j=0; j<payload.columns; j++) {\r\n      mat[i][j] = {\r\n        id: `${i}_${j}`,\r\n        amount: Math.round(Math.random() * (999 - 100) + 100),\r\n      }\r\n    }\r\n  }\r\n\r\n  return { \r\n    type: ADD_MATRIX, \r\n    payload: {\r\n      rows: payload.rows,\r\n      columns: payload.columns,\r\n      x: payload.x,\r\n      matrix: mat\r\n    }\r\n  }\r\n};\r\n\r\nexport function updateMatrixCell(id, value) {\r\n  return { \r\n    type: UPDATE_MATRIX_CELL, \r\n    payload: {\r\n      id,\r\n      value\r\n    }\r\n  }\r\n};\r\n\r\nexport function updateMatrix(matrix) {\r\n  return { \r\n    type: UPDATE_MATRIX, \r\n    payload: {\r\n      matrix\r\n    }\r\n  }\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { addMatrix } from \"../../redux/actions/index\";\r\n\r\nimport './form.css';\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    addMatrix: matrix => dispatch(addMatrix(matrix))\r\n  };\r\n}\r\n\r\nclass ConnectedForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      rows: 0,\r\n      columns: 0,\r\n      x: 0\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({ \r\n      [event.target.id]: +event.target.value \r\n    });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    const settings = this.state;\r\n    this.props.addMatrix(settings);\r\n  }\r\n  render() {\r\n    const settings = this.state;\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <div className='inputs_group'>\r\n          <label htmlFor='m'>Rows:</label>\r\n          <input \r\n            type='number'\r\n            id='rows' \r\n            min='1'\r\n            value={settings.rows}\r\n            onChange={this.handleChange}\r\n          />\r\n        </div>\r\n        <div className='inputs_group'>\r\n          <label htmlFor='n'>Columns:</label>\r\n          <input \r\n            type='number' \r\n            id='columns' \r\n            min='1'\r\n            value={settings.columns}\r\n            onChange={this.handleChange}\r\n          />\r\n        </div>\r\n        <div className='inputs_group'>\r\n          <label htmlFor='n'>X:</label>\r\n          <input \r\n            type='number' \r\n            id='x' \r\n            min='0'\r\n            value={settings.x}\r\n            onChange={this.handleChange}\r\n          />\r\n        </div>\r\n        <button type=\"submit\">BUILD</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst Form = connect(\r\n  null,\r\n  mapDispatchToProps\r\n)(ConnectedForm);\r\n\r\nexport default Form;","import Average from './components/Average/Average';\nimport Matrix from './components/Matrix/Matrix';\nimport Form from './components/Form/Form';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"matrix\">\n      <div className='matrix__inputs'>\n        <Form />\n      </div>\n      <div className='martrix__wrap'>\n        <div className='matrix__top'>\n          <Matrix />\n        </div>\n        <div className='matrix__bot'>\n          <Average />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux'\nimport { compose, createStore } from 'redux'\nimport rootReducer from './redux/reducers/rootReducer';\n\nimport './index.css';\nimport App from './App';\n\nconst store = createStore(rootReducer, compose(\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}